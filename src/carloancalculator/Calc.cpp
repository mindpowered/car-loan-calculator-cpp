// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_carloancalculator_Calc
#include <carloancalculator/Calc.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ad6a45b6af1cd9a8_4_new,"carloancalculator.Calc","new",0x4bebf74f,"carloancalculator.Calc.new","carloancalculator/Calc.hx",4,0x2a9d1920)
HX_LOCAL_STACK_FRAME(_hx_pos_ad6a45b6af1cd9a8_12_calcPayments,"carloancalculator.Calc","calcPayments",0x11252f93,"carloancalculator.Calc.calcPayments","carloancalculator/Calc.hx",12,0x2a9d1920)
HX_LOCAL_STACK_FRAME(_hx_pos_ad6a45b6af1cd9a8_32_calcAffordability,"carloancalculator.Calc","calcAffordability",0xac963264,"carloancalculator.Calc.calcAffordability","carloancalculator/Calc.hx",32,0x2a9d1920)
HX_LOCAL_STACK_FRAME(_hx_pos_ad6a45b6af1cd9a8_69_calcPay,"carloancalculator.Calc","calcPay",0x1cc68642,"carloancalculator.Calc.calcPay","carloancalculator/Calc.hx",69,0x2a9d1920)
namespace carloancalculator{

void Calc_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ad6a45b6af1cd9a8_4_new)
            	}

Dynamic Calc_obj::__CreateEmpty() { return new Calc_obj; }

void *Calc_obj::_hx_vtable = 0;

Dynamic Calc_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Calc_obj > _hx_result = new Calc_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Calc_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c111297;
}

::Array< ::Dynamic> Calc_obj::calcPayments(Float newCarPrice,Float tradeInAllowance,Float tradeInLoanBalance,Float downPaymentAndRebates,Float loanDuration,Float salesTaxRate,Float interestRate){
            	HX_STACKFRAME(&_hx_pos_ad6a45b6af1cd9a8_12_calcPayments)
HXLINE(  13)		Float tax = ((salesTaxRate / ((Float)100.)) * (newCarPrice - tradeInAllowance));
HXLINE(  14)		Float principal = ((((newCarPrice - tradeInAllowance) + tradeInLoanBalance) - downPaymentAndRebates) + tax);
HXLINE(  16)		principal = (::Math_obj::fround((principal * ( (Float)(100) ))) / ((Float)100.0));
HXLINE(  18)		::Array< ::Dynamic> ret = ::Array_obj< ::Dynamic>::__new();
HXLINE(  19)		ret->push(this->calcPay(principal,interestRate,12,::Std_obj::_hx_int(loanDuration),HX_("Monthly",ad,9d,a1,86)));
HXLINE(  20)		ret->push(this->calcPay(principal,interestRate,26,::Math_obj::ceil((loanDuration * ((Float)2.16666666666666652))),HX_("Bi-Weekly",87,d8,cc,5a)));
HXLINE(  21)		ret->push(this->calcPay(principal,interestRate,52,::Math_obj::ceil((loanDuration * ((Float)4.33333333333333304))),HX_("Weekly",a1,17,99,33)));
HXLINE(  22)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC7(Calc_obj,calcPayments,return )

 ::Dynamic Calc_obj::calcAffordability(Float monthlyPayment,Float tradeInAllowance,Float tradeInLoanBalance,Float downPaymentAndRebates,Float loanDuration,Float salesTaxRate,Float interestRate){
            	HX_STACKFRAME(&_hx_pos_ad6a45b6af1cd9a8_32_calcAffordability)
HXLINE(  33)		Float taxrate = (salesTaxRate / ((Float)100.));
HXLINE(  36)		Float interest = ( (Float)(0) );
HXLINE(  37)		Float aftertax = (monthlyPayment * loanDuration);
HXLINE(  38)		Float beforetax = (aftertax / (((Float)1.) + taxrate));
HXLINE(  39)		Float tax = (aftertax - beforetax);
HXLINE(  40)		Float price = beforetax;
HXLINE(  42)		if ((interestRate > 0)) {
HXLINE(  43)			Float M = monthlyPayment;
HXLINE(  45)			Float q = ( (Float)(12) );
HXLINE(  46)			Float i = (interestRate / ((Float)100.));
HXLINE(  47)			Float n = (loanDuration / ((Float)12.0));
HXLINE(  48)			Float P = ((M * (((Float)1.0) - ::Math_obj::pow((((Float)1.0) + (i / q)),((((Float)-1.) * n) * q)))) * (q / i));
HXLINE(  49)			Float I = (((M * n) * q) - P);
HXLINE(  51)			aftertax = (((P + downPaymentAndRebates) + tradeInAllowance) - tradeInLoanBalance);
HXLINE(  52)			interest = I;
HXLINE(  53)			Float rebates = tradeInAllowance;
HXLINE(  54)			beforetax = (((taxrate * rebates) + aftertax) / (((Float)1.) + taxrate));
HXLINE(  55)			tax = (aftertax - beforetax);
HXLINE(  56)			price = beforetax;
            		}
HXLINE(  59)		Float total = ((price + tax) + interest);
HXLINE(  61)		return  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("price",89,4e,8b,c8),(::Math_obj::fround((price * ( (Float)(100) ))) / ((Float)100.0)))
            			->setFixed(1,HX_("tax",6b,5a,58,00),(::Math_obj::fround((tax * ( (Float)(100) ))) / ((Float)100.0)))
            			->setFixed(2,HX_("total",c4,53,32,14),(::Math_obj::fround((total * ( (Float)(100) ))) / ((Float)100.0)))
            			->setFixed(3,HX_("interest",aa,a2,6f,28),(::Math_obj::fround((interest * ( (Float)(100) ))) / ((Float)100.0))));
            	}


HX_DEFINE_DYNAMIC_FUNC7(Calc_obj,calcAffordability,return )

 ::Dynamic Calc_obj::calcPay(Float principal,Float annualInterestRatePercent,int paymentsPerYear,int totalPayments,::String frequencyString){
            	HX_STACKFRAME(&_hx_pos_ad6a45b6af1cd9a8_69_calcPay)
HXLINE(  70)		Float q = ( (Float)(paymentsPerYear) );
HXLINE(  71)		Float i = (annualInterestRatePercent / ((Float)100.));
HXLINE(  72)		Float P = principal;
HXLINE(  73)		Float n = (( (Float)(totalPayments) ) / (((Float)1.0) * ( (Float)(paymentsPerYear) )));
HXLINE(  74)		Float mden = (q * (((Float)1.0) - ::Math_obj::pow((((Float)1.0) + (i / q)),((((Float)-1.0) * n) * q))));
HXLINE(  75)		Float M = ((P * i) / mden);
HXLINE(  76)		Float I = (((M * n) * q) - P);
HXLINE(  77)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("frequency",9c,82,ea,bb),frequencyString)
            			->setFixed(1,HX_("payment",06,6b,d7,ed),(::Math_obj::fround((M * ( (Float)(100) ))) / ((Float)100.0)))
            			->setFixed(2,HX_("interest",aa,a2,6f,28),(::Math_obj::fround((I * ( (Float)(100) ))) / ((Float)100.0))));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Calc_obj,calcPay,return )


::hx::ObjectPtr< Calc_obj > Calc_obj::__new() {
	::hx::ObjectPtr< Calc_obj > __this = new Calc_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Calc_obj > Calc_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Calc_obj *__this = (Calc_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Calc_obj), false, "carloancalculator.Calc"));
	*(void **)__this = Calc_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Calc_obj::Calc_obj()
{
}

::hx::Val Calc_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"calcPay") ) { return ::hx::Val( calcPay_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"calcPayments") ) { return ::hx::Val( calcPayments_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"calcAffordability") ) { return ::hx::Val( calcAffordability_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Calc_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Calc_obj_sStaticStorageInfo = 0;
#endif

static ::String Calc_obj_sMemberFields[] = {
	HX_("calcPayments",62,2c,6c,fc),
	HX_("calcAffordability",35,67,5d,d6),
	HX_("calcPay",d3,bb,5e,4e),
	::String(null()) };

::hx::Class Calc_obj::__mClass;

void Calc_obj::__register()
{
	Calc_obj _hx_dummy;
	Calc_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("carloancalculator.Calc",dd,a3,14,83);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Calc_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Calc_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Calc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Calc_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace carloancalculator
